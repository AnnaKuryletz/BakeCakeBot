from aiogram import types, Router, F
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from bot.models import DeliveryState, CustomCakeState
from aiogram import Bot, types
from config import ADMIN_GROUP_ID
from .keyboards import get_consent_keyboard, get_main_menu, get_order_menu, get_ready_cakes_menu, get_delivery_button, get_custom_cakes_menu
from .noti import send_order_notification
router = Router()


@router.message(Command("get_group_id"))
async def get_group_id(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ID –≥—Ä—É–ø–ø—ã"""
    if message.chat.type in ["group", "supergroup"]:
        await message.answer(f"ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: `{message.chat.id}`", parse_mode="Markdown")
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")


async def send_admin_notification(bot: Bot, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    await bot.send_message(ADMIN_GROUP_ID, text)


@router.message(Command("start"))
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–∏—è."""
    user_name = message.from_user.username if message.from_user.username else message.from_user.first_name
    text = f"–ü—Ä–∏–≤–µ—Ç, {user_name} üôã‚Äç‚ôÄÔ∏è! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    consent_file = FSInputFile("files/soglasie.pdf")
    await message.answer(text, reply_markup=get_consent_keyboard())
    await message.answer_document(consent_file)

@router.message(lambda message: message.text == "–°–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
async def agree_handler(message: types.Message):
    await message.answer(
        "–í—ã –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.", 
        reply_markup=types.ReplyKeyboardRemove()
    )
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=get_main_menu())

@router.message(lambda message: message.text == "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
async def disagree_handler(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    await message.answer(
        "–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.", 
        reply_markup=types.ReplyKeyboardRemove()
    )

@router.callback_query(F.data == "order_cake")
async def order_cake_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç' –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–∫–∞–∑–∞."""
    await callback.message.answer("–ö–∞–∫–æ–π —Ç–æ—Ä—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=get_order_menu())

@router.callback_query(F.data == "view_prices")
async def view_prices_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã'."""
    await callback.message.answer('''–í–æ—Ç –Ω–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç :\n1. –¢–æ—Ä—Ç "–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ"\n–û–ø–∏—Å–∞–Ω–∏–µ: –ë–æ–≥–∞—Ç—ã–π —à–æ–∫–æ–ª–∞–¥–Ω—ã–π —Ç–æ—Ä—Ç —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –≤–∫—É—Å–æ–º –∫–∞–∫–∞–æ, –Ω–µ–∂–Ω—ã–º –∫—Ä–µ–º–æ–º –∏–∑ –±–µ–ª—å–≥–∏–π—Å–∫–æ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞ –∏ –ª–µ–≥–∫–∏–º –∞—Ä–æ–º–∞—Ç–æ–º –≤–∞–Ω–∏–ª–∏. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —à–æ–∫–æ–ª–∞–¥–∞.\n
–¶–µ–Ω–∞: 1500 —Ä—É–±. (1,5 –∫–≥)\n
–°–æ—Å—Ç–∞–≤: —à–æ–∫–æ–ª–∞–¥–Ω—ã–π –±–∏—Å–∫–≤–∏—Ç, –≥–∞–Ω–∞—à –∏–∑ —Ç–µ–º–Ω–æ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞, —Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ, —Å–∞—Ö–∞—Ä, —è–π—Ü–∞, –≤–∞–Ω–∏–ª—å, –∫–∞–∫–∞–æ, —Å–ª–∏–≤–∫–∏.\n
2. –¢–æ—Ä—Ç "–ö–ª—É–±–Ω–∏—á–Ω–∞—è –º–µ—á—Ç–∞"\n–û–ø–∏—Å–∞–Ω–∏–µ: –õ–µ–≥–∫–∏–π –∏ –≤–æ–∑–¥—É—à–Ω—ã–π —Ç–æ—Ä—Ç —Å –Ω–µ–∂–Ω—ã–º –±–∏—Å–∫–≤–∏—Ç–æ–º, –ø—Ä–æ–ø–∏—Ç–∞–Ω–Ω—ã–º –∫–ª—É–±–Ω–∏—á–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º, –∏ —Å–ª–æ–µ–º —Å–ª–∏–≤–æ—á–Ω–æ–≥–æ –∫—Ä–µ–º–∞ —Å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –∫–ª—É–±–Ω–∏–∫–æ–π.\n
–¶–µ–Ω–∞: 1700 —Ä—É–±. (1,8 –∫–≥)\n
–°–æ—Å—Ç–∞–≤: –≤–∞–Ω–∏–ª—å–Ω—ã–π –±–∏—Å–∫–≤–∏—Ç, –∫–ª—É–±–Ω–∏—á–Ω–æ–µ –ø—é—Ä–µ, —Å–ª–∏–≤–æ—á–Ω—ã–π –∫—Ä–µ–º, —Å–∞—Ö–∞—Ä, —è–π—Ü–∞, —Å–ª–∏–≤–∫–∏, –∂–µ–ª–∞—Ç–∏–Ω, –≤–∞–Ω–∏–ª—å.\n
3. –¢–æ—Ä—Ç "–ú–µ–¥–æ–≤–∏–∫ –ø–æ-–¥–æ–º–∞—à–Ω–µ–º—É"\n –û–ø–∏—Å–∞–Ω–∏–µ: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–µ–¥–æ–≤—ã–π —Ç–æ—Ä—Ç —Å –º—è–≥–∫–∏–º–∏ –º–µ–¥–æ–≤—ã–º–∏ –∫–æ—Ä–∂–∞–º–∏ –∏ –Ω–µ–∂–Ω—ã–º —Å–º–µ—Ç–∞–Ω–Ω—ã–º –∫—Ä–µ–º–æ–º. –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤–∫—É—Å–æ–≤ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–ø–µ—á–∫–∏.\n
–¶–µ–Ω–∞: 1400 —Ä—É–±. (1,5 –∫–≥)\n
–°–æ—Å—Ç–∞–≤: –º—É–∫–∞, –º–µ–¥, —Å–∞—Ö–∞—Ä, —è–π—Ü–∞, —Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ, —Å–º–µ—Ç–∞–Ω–∞, —Å–æ–¥–∞, –≤–∞–Ω–∏–ª—å, –≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é).\n
4. –¢–æ—Ä—Ç "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π —Ä–∞–π"\n –û–ø–∏—Å–∞–Ω–∏–µ: –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä—Ç —Å –∞–Ω–∞–Ω–∞—Å–æ–º, –∫–æ–∫–æ—Å–æ–º –∏ –º–∞–Ω–≥–æ, –ø—Ä–æ–ø–∏—Ç–∞–Ω–Ω—ã–π –ª–µ–≥–∫–∏–º —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–º —Å–∏—Ä–æ–ø–æ–º. –û—Å–≤–µ–∂–∞—é—â–∏–π –∏ –Ω–µ–∂–Ω—ã–π –¥–µ—Å–µ—Ä—Ç –¥–ª—è –∂–∞—Ä–∫–∏—Ö –¥–Ω–µ–π.\n
–¶–µ–Ω–∞: 1800 —Ä—É–±. (1,7 –∫–≥)\n
–°–æ—Å—Ç–∞–≤: –∫–æ–∫–æ—Å–æ–≤—ã–π –±–∏—Å–∫–≤–∏—Ç, –∞–Ω–∞–Ω–∞—Å–æ–≤–æ–µ –ø—é—Ä–µ, –º–∞–Ω–≥–æ–≤—ã–π –º—É—Å—Å, —Å–ª–∏–≤–∫–∏, —Å–∞—Ö–∞—Ä, —è–π—Ü–∞, –∂–µ–ª–∞—Ç–∏–Ω, –ª–∞–π–º–æ–≤—ã–π —Å–∏—Ä–æ–ø\n
5. –¢–æ—Ä—Ç "–û—Ä–µ—Ö–æ–≤—ã–π —à–µ–¥–µ–≤—Ä"\n–û–ø–∏—Å–∞–Ω–∏–µ: –ù–∞—Å—ã—â–µ–Ω–Ω—ã–π –æ—Ä–µ—Ö–æ–≤—ã–π —Ç–æ—Ä—Ç —Å –∫–∞—Ä–∞–º–µ–ª—å–Ω–æ-—à–æ–∫–æ–ª–∞–¥–Ω—ã–º –∫—Ä–µ–º–æ–º –∏ —Ö—Ä—É—Å—Ç—è—â–∏–º–∏ —Å–ª–æ—è–º–∏ –∏–∑ —Ñ—É–Ω–¥—É–∫–∞ –∏ –º–∏–Ω–¥–∞–ª—è.\n
–¶–µ–Ω–∞: 1900 —Ä—É–±. (2 –∫–≥)\n
–°–æ—Å—Ç–∞–≤: –æ—Ä–µ—Ö–æ–≤—ã–π –±–∏—Å–∫–≤–∏—Ç, –∫–∞—Ä–∞–º–µ–ª—å, —à–æ–∫–æ–ª–∞–¥–Ω—ã–π –∫—Ä–µ–º, —Ñ—É–Ω–¥—É–∫, –º–∏–Ω–¥–∞–ª—å, —Å–ª–∏–≤–∫–∏, —Å–∞—Ö–∞—Ä, —è–π—Ü–∞, –≤–∞–Ω–∏–ª—å.
6. –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç - +300—Ä—É–±. –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞''')


@router.callback_query(F.data == "delivery_time")
async def delivery_time_callback(callback: CallbackQuery):
    """–í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–µ–∫—É—â–∞—è + 2 –¥–Ω—è)."""
    delivery_date = (datetime.now() + timedelta(days=2)).strftime("%d.%m.%Y")
    await callback.message.answer(f"üì¶ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}")


@router.callback_query(F.data == "order_ready_cake")
async def order_ready_cake_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ç–æ—Ä—Ç' –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä—Ç–æ–≤."""
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –≥–æ—Ç–æ–≤—ã—Ö —Ç–æ—Ä—Ç–æ–≤:", reply_markup=get_ready_cakes_menu())

@router.callback_query(F.data.startswith("cake_"))
async def ready_cake_selected(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞."""
    cakes = {
        "cake_nut_masterpiece": "–¢–æ—Ä—Ç '–û—Ä–µ—Ö–æ–≤—ã–π —à–µ–¥–µ–≤—Ä'",
        "cake_tropical_paradise": "–¢–æ—Ä—Ç '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π —Ä–∞–π'",
        "cake_honey_homemade": "–¢–æ—Ä—Ç '–ú–µ–¥–æ–≤–∏–∫ –ø–æ-–¥–æ–º–∞—à–Ω–µ–º—É'",
        "cake_strawberry_dream": "–¢–æ—Ä—Ç '–ö–ª—É–±–Ω–∏—á–Ω–∞—è –º–µ—á—Ç–∞'",
        "cake_choco_delight": "–¢–æ—Ä—Ç '–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ'"
    }
    
    selected_cake = cakes.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ—Ä—Ç")
    await callback.message.answer(
        f"‚úÖ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Ç–æ—Ä—Ç *{selected_cake}*.\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ñ–æ—Ä–º–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.",
        reply_markup=get_delivery_button(),
        parse_mode="Markdown"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    await send_order_notification(bot, callback.from_user, selected_cake)

    await callback.answer()

@router.callback_query(F.data == "start_delivery")
async def start_delivery(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏."""
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(DeliveryState.waiting_for_address)

@router.message(DeliveryState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    await state.update_data(address=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å). –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
    await state.set_state(DeliveryState.waiting_for_comment)

@router.message(DeliveryState.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞."""
    user_data = await state.get_data()
    address = user_data.get("address")
    comment = message.text

    await message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\nüìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\nüí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {comment}\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! üéÇ")
    await state.clear()

@router.callback_query(F.data == "order_custom_cake")
async def order_custom_cake_callback(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–æ—Ä—Ç–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏."""
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ—Ä—Ç —Ö–æ—Ç–∏—Ç–µ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å:", 
        reply_markup=get_custom_cakes_menu()
    )


@router.callback_query(F.data.startswith("custom_cake_"))
async def custom_cake_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ—Ä—Ç–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–¥–ø–∏—Å—å."""
    cakes = {
        "custom_cake_nut_masterpiece": "–¢–æ—Ä—Ç '–û—Ä–µ—Ö–æ–≤—ã–π —à–µ–¥–µ–≤—Ä'",
        "custom_cake_tropical_paradise": "–¢–æ—Ä—Ç '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π —Ä–∞–π'",
        "custom_cake_honey_homemade": "–¢–æ—Ä—Ç '–ú–µ–¥–æ–≤–∏–∫ –ø–æ-–¥–æ–º–∞—à–Ω–µ–º—É'",
        "custom_cake_strawberry_dream": "–¢–æ—Ä—Ç '–ö–ª—É–±–Ω–∏—á–Ω–∞—è –º–µ—á—Ç–∞'",
        "custom_cake_choco_delight": "–¢–æ—Ä—Ç '–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ'"
    }
    
    selected_cake = cakes.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ—Ä—Ç")
    await state.update_data(selected_cake=selected_cake)
    
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_cake} üéÇ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–¥–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Ç–æ—Ä—Ç:"
    )
    
    await state.set_state(CustomCakeState.waiting_for_text)


@router.message(CustomCakeState.waiting_for_text)
async def receive_cake_text(message: types.Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–¥–ø–∏—Å—å, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    user_data = await state.get_data()
    selected_cake = user_data.get("selected_cake")
    cake_text = message.text

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π {selected_cake}!\nüñã –ù–∞–¥–ø–∏—Å—å: \"{cake_text}\".\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ñ–æ—Ä–º–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.",
        reply_markup=get_delivery_button()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    await send_order_notification(bot, message.from_user, selected_cake, cake_text)

    await state.clear()




