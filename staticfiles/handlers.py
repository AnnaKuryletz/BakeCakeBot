from aiogram import types, Router, F
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from bot.models import DeliveryState, CustomCakeState, StandardCake, Level, Shape, Topping, Decor, Berry
from asgiref.sync import sync_to_async
import logging
from aiogram import Bot, types
from config import ADMIN_GROUP_ID
from .keyboards import (
    get_consent_keyboard,
    get_main_menu,
    get_order_menu,
    get_ready_cakes_menu,
    get_level_keyboard,
    get_shape_keyboard,
    get_topping_keyboard,
    get_berries_keyboard,
    get_decor_keyboard,
)
from .notifications import send_order_notification

router = Router()
logger = logging.getLogger(__name__)


SHAPE_DICT = {
    'square': '–ö–≤–∞–¥—Ä–∞—Ç',
    'circle': '–ö—Ä—É–≥',
    'rectangle': '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫'
}

TOPPING_DICT = {
    'none': '–ë–µ–∑ —Ç–æ–ø–ø–∏–Ω–≥–∞',
    'white_sauce': '–ë–µ–ª—ã–π —Å–æ—É—Å',
    'caramel_syrup': '–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–∏—Ä–æ–ø',
    'maple_syrup': '–ö–ª–µ–Ω–æ–≤—ã–π —Å–∏—Ä–æ–ø',
    'strawberry_syrup': '–ö–ª—É–±–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø',
    'blueberry_syrup': '–ß–µ—Ä–Ω–∏—á–Ω—ã–π —Å–∏—Ä–æ–ø',
    'milk_chocolate': '–ú–æ–ª–æ—á–Ω—ã–π —à–æ–∫–æ–ª–∞–¥'
}

BERRY_DICT = {
    'blackberry': '–ï–∂–µ–≤–∏–∫–∞',
    'raspberry': '–ú–∞–ª–∏–Ω–∞',
    'blueberry': '–ì–æ–ª—É–±–∏–∫–∞',
    'strawberry': '–ö–ª—É–±–Ω–∏–∫–∞'
}

DECOR_DICT = {
    'pistachios': '–§–∏—Å—Ç–∞—à–∫–∏',
    'meringue': '–ë–µ–∑–µ',
    'hazelnut': '–§—É–Ω–¥—É–∫',
    'pecan': '–ü–µ–∫–∞–Ω',
    'marshmallow': '–ú–∞—Ä—à–º–µ–ª–ª–æ—É',
    'marzipan': '–ú–∞—Ä—Ü–∏–ø–∞–Ω'
}

@router.message(Command("get_group_id"))
async def get_group_id(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ID –≥—Ä—É–ø–ø—ã"""
    if message.chat.type in ["group", "supergroup"]:
        await message.answer(
            f"ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: `{message.chat.id}`", parse_mode="Markdown"
        )
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")


async def send_admin_notification(bot: Bot, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    await bot.send_message(ADMIN_GROUP_ID, text)


@router.message(Command("start"))
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–∏—è."""
    user_name = (
        message.from_user.username
        if message.from_user.username
        else message.from_user.first_name
    )
    text = f"–ü—Ä–∏–≤–µ—Ç, {user_name} üôã‚Äç‚ôÄÔ∏è! BakeCake –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    consent_file = FSInputFile("files/soglasie.pdf")
    await message.answer(text, reply_markup=get_consent_keyboard())
    await message.answer_document(consent_file)


@router.message(
    lambda message: message.text == "‚úÖ–°–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
)
async def agree_handler(message: types.Message):
    await message.answer(
        "–í—ã –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=get_main_menu()
    )


@router.message(
    lambda message: message.text == "‚ùå–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
)
async def disagree_handler(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    await message.answer(
        "–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—Éüòî.",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@router.callback_query(F.data == "order_cake")
async def order_cake_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç' –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–∫–∞–∑–∞."""
    await callback.message.answer(
        "–ö–∞–∫–æ–π —Ç–æ—Ä—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=get_order_menu()
    )


@sync_to_async
def get_all_cakes():
    try:
        return list(
            StandardCake.objects.all())
    except Exception as e:
        print(f"Error: {e}")
        return []

@router.callback_query(F.data == "view_prices")
async def view_prices_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã'."""
    cakes = await get_all_cakes()
    price_list= "–í–æ—Ç –Ω–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:\n"

    for index, cake in enumerate(cakes, start=1):
        price_list += f"{index}. {cake.name}\n" \
                      f"–û–ø–∏—Å–∞–Ω–∏–µ: {cake.description}\n" \
                      f"–¶–µ–Ω–∞: {cake.price} —Ä—É–±.\n\n"
    await callback.message.answer(price_list)


@router.callback_query(F.data == "delivery_time")
async def delivery_time_callback(callback: CallbackQuery):
    """–í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–µ–∫—É—â–∞—è + 2 –¥–Ω—è)."""
    delivery_date = (datetime.now() + timedelta(days=2)).strftime("%d.%m.%Y")
    await callback.message.answer(f"üì¶ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}")


@router.callback_query(F.data == "order_ready_cake")
async def order_ready_cake_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ç–æ—Ä—Ç' –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä—Ç–æ–≤."""
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –≥–æ—Ç–æ–≤—ã—Ö —Ç–æ—Ä—Ç–æ–≤:", reply_markup=get_ready_cakes_menu()
    )


@router.callback_query(F.data.startswith("cake_"))
async def ready_cake_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–æ—Ä—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."""
    cakes = {
        "cake_chocolate_classic": "–¢–æ—Ä—Ç '–®–æ–∫–æ–ª–∞–¥–Ω–∞—è –∫–ª–∞—Å—Å–∏–∫–∞' - 2930.00 —Ä—É–±.",
        "cake_caramel_seduction": "–¢–æ—Ä—Ç '–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π —Å–æ–±–ª–∞–∑–Ω' - 2180.00 —Ä—É–±.",
        "cake_berry_paradise": "–¢–æ—Ä—Ç '–Ø–≥–æ–¥–Ω—ã–π —Ä–∞–π' - 3330.00 —Ä—É–±.",
        "cake_tenderness": "–¢–æ—Ä—Ç '–ù–µ–∂–Ω–æ—Å—Ç—å' - 2600.00 —Ä—É–±.",
        "cake_maple_comfort": "–¢–æ—Ä—Ç '–ö–ª–µ–Ω–æ–≤—ã–π —É—é—Ç' - 2580.00 —Ä—É–±.",
        "cake_minimalism": "–¢–æ—Ä—Ç '–ú–∏–Ω–∏–º–∞–ª–∏–∑–º' - 2400.00 —Ä—É–±.",
    }

    selected_cake = cakes.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ—Ä—Ç")
    await state.update_data(selected_cake=selected_cake)

    await callback.message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä—Ç *{selected_cake}*.\n\n" "üìç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        parse_mode="Markdown",
    )

    await state.set_state(DeliveryState.waiting_for_address)
    await callback.answer()


@router.callback_query(F.data == "start_delivery")
async def start_delivery(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏."""
    await callback.message.answer("üìç–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(DeliveryState.waiting_for_address)


@router.message(DeliveryState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    await state.update_data(address=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å). –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'."
    )
    await state.set_state(DeliveryState.waiting_for_comment)


@router.message(DeliveryState.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    user_data = await state.get_data()
    address = user_data.get("address")
    comment = message.text
    selected_cake = user_data.get("selected_cake", "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç")
    cake_text = user_data.get("cake_text", None)  

    base_cake = user_data.get("base_cake")
    if selected_cake and "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç" in selected_cake and base_cake:
        selected_cake = f"–ó–∞–∫–∞–∑: {base_cake} (–∫–∞—Å—Ç–æ–º–Ω—ã–π)"

    await message.answer(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\nüìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\nüí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {comment}\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! üéÇ"
    )

    await send_order_notification(
        bot, message.from_user, selected_cake, address, comment, cake_text
    )

    await state.clear()


@router.callback_query(F.data == "order_custom_cake")
async def order_custom_cake_callback(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä—Ç–∞ –∏ –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è"""
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä—Ç–∞:",
        reply_markup=get_level_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("level_"))
async def level_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Ç–æ—Ä—Ç–∞"""
    level = callback.data.split("_")[1]

    await state.update_data(level=level)

    await state.set_state(CustomCakeState.waiting_for_shape)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {level} —É—Ä–æ–≤–µ–Ω—å. üéÇ\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É —Ç–æ—Ä—Ç–∞.",
        reply_markup=get_shape_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("shape_"))
async def shape_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º—ã —Ç–æ—Ä—Ç–∞"""
    shape = callback.data.split("_")[1]
    shape_name = SHAPE_DICT.get(shape, shape)  # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

    await state.update_data(shape=shape)

    await state.set_state(CustomCakeState.waiting_for_topping)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º—É: {shape_name}. üéÇ\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–Ω–≥ –¥–ª—è —Ç–æ—Ä—Ç–∞.",
        reply_markup=get_topping_keyboard()
    )
    await callback.answer()



@router.callback_query(F.data.startswith("topping_"))
async def topping_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞—á–∏–Ω–∫–∏"""
    topping = callback.data.split("_", 1)[1] 
    topping_name = TOPPING_DICT.get(topping, topping)  # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

    await state.update_data(topping=topping)

    await state.set_state(CustomCakeState.waiting_for_berries)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–ø–∏–Ω–≥: {topping_name}. üç´\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–≥–æ–¥—ã –¥–ª—è —Ç–æ—Ä—Ç–∞.",
        reply_markup=get_berries_keyboard()
    )
    await callback.answer()



@router.callback_query(F.data.startswith("berry_"))
async def berry_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–≥–æ–¥"""
    berry = callback.data.split("_")[1]
    berry_name = BERRY_DICT.get(berry, berry)  # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

    await state.update_data(berry=berry)

    await state.set_state(CustomCakeState.waiting_for_decor)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–≥–æ–¥—É: {berry_name}. üçì\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∫–æ—Ä –¥–ª—è —Ç–æ—Ä—Ç–∞.",
        reply_markup=get_decor_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("decor_"))
async def decor_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–∫–æ—Ä–∞"""
    decor = callback.data.split("_")[1]
    decor_name = DECOR_DICT.get(decor, decor)  # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

    await state.update_data(decor=decor)

    await state.set_state(CustomCakeState.waiting_for_text)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–∫–æ—Ä: {decor_name}. üéâ\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞ —Ç–æ—Ä—Ç (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –±–µ–∑ –Ω–∞–¥–ø–∏—Å–∏)."
    )
    await callback.answer()


@router.message(CustomCakeState.waiting_for_text)
async def receive_cake_text(message: types.Message, state: FSMContext):
    """–§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞."""
    cake_text = message.text.strip().lower()

    if cake_text == "–Ω–µ—Ç":
        cake_text = None  

    await state.update_data(cake_text=cake_text)
    user_data = await state.get_data()

    level = user_data.get("level", "–ù–µ —É–∫–∞–∑–∞–Ω")
    shape = user_data.get("shape", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    topping = user_data.get("topping", "–ù–µ —É–∫–∞–∑–∞–Ω")
    berry = user_data.get("berry", "–ù–µ —É–∫–∞–∑–∞–Ω—ã")
    decor = user_data.get("decor", "–ë–µ–∑ –¥–µ–∫–æ—Ä–∞")  

    # –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
    level = dict((item[0], item[1]) for item in Level.CHOICES).get(level, "–ù–µ —É–∫–∞–∑–∞–Ω")
    shape = dict((item[0], item[1]) for item in Shape.CHOICES).get(shape, "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    topping = dict((item[0], item[1]) for item in Topping.CHOICES).get(topping, "–ù–µ —É–∫–∞–∑–∞–Ω")
    berry = dict((item[0], item[1]) for item in Berry.CHOICES).get(berry, "–ù–µ —É–∫–∞–∑–∞–Ω—ã")
    decor = dict((item[0], item[1]) for item in Decor.CHOICES).get(decor, "–ë–µ–∑ –¥–µ–∫–æ—Ä–∞")

    cake_text = cake_text or "–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏"  

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º –∑–∞–∫–∞–∑–æ–º
    result_message = (
        "üéÇ *–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!*\n\n"
        f"üìè –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"üîµ –§–æ—Ä–º–∞: {shape}\n"
        f"üç´ –¢–æ–ø–ø–∏–Ω–≥: {topping}\n"
        f"üçì –Ø–≥–æ–¥—ã: {berry}\n"
        f"‚ú® –î–µ–∫–æ—Ä: {decor}\n"
        f"üñã –ù–∞–¥–ø–∏—Å—å: {cake_text}\n\n"
        "üìç –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
    )

    await message.answer(result_message, parse_mode="Markdown")

    await state.set_state(DeliveryState.waiting_for_address)




@router.message(DeliveryState.waiting_for_address)
async def receive_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    address = message.text
    await state.update_data(address=address)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å). –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'."
    )

    await state.set_state(DeliveryState.waiting_for_comment)
